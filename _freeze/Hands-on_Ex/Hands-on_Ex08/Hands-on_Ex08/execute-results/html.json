{
  "hash": "89890bcb0a7bfa44c41990a4ed07593d",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 8: Network Data Visualisation and Analysis\"\nauthor: \"Wei Yanrui\"\ndate: \"March 5, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\neditor: visual\n---\n\n\n# 1. Roadmap for studying\n\n![]()\n\n# 2. Getting Started\n\n## 2.1 Installing and launching R packages\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are **igraph, tidygraph, ggraph** and **visNetwork**. Beside these four packages, **tidyverse** and **lubridate**, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(igraph,tidygraph,ggraph,\n               visNetwork,lubridate,clock,\n               tidyverse,graphlayouts)\n```\n:::\n\n\n# 3. The Data\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n-   **Nodes Data**: Points or dots in a network which can represent almost anything, depending on what the network is about. Nodes data is essentially information about these points, such as their names, characteristics, and possibly their positions in space if the network has a geographical component.\n-   **Edges Data**: Lines that connect the nodes in a network, showing how they are related. Edges data includes information about these connections, like the type of relationship (friendship, road, data link, etc.), the strength or capacity of the connection (like the bandwidth of an internet connection), and sometimes the distance or cost associated with the connection.\n\n## 3.1 The edges data\n\n*GAStech-email_edges-v2.csv* which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n![edgesdata](image/edgesdata.png)\n\n## 3.2 The nodes data\n\n*GAStech_email_nodes.csv* which consist of the names, department and title of the 55 employees.\n\n![nodesdata](image/nodesdata.png)\n\n## 3.3 Importing network data from files\n\nImport *GAStech_email_node.csv* and *GAStech_email_edges-v2.csv* into RStudio environment by using `read_csv()` of readr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n```\n:::\n\n\n## 3.4 Reviewing the imported data\n\nNext, we will examine the structure of the data frame using `glimpse()` of **dplyr**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n```\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Warning\n\nThe output report of *GAStech_edges* above reveals that the *SentDate* is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date” data type.\n:::\n\n## 3.5 Wrangling time\n\nThe code chunk below will be used to perform the changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_edges <- GAStech_edges %>%\n  mutate(SentDate = dmy(SentDate)) %>%\n  mutate(Weekday=wday(SentDate,\n                      label=TRUE,\n                      abbr=FALSE))\n```\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `dmy()`: a function of **lubridate** package which transforms the *SentDate* to Date data type.\n\n2.  `wday()`: a function of **lubridate** package which returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. *Weekday* and the output of `wday()` will save in this newly created field. The values in the Weekday field are in ordinal scale.\n:::\n\n## 3.6 Reviewing the revised data fields\n\nTable below shows the data structure of the reformatted GAStech_edges data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 9,063\nColumns: 9\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ Weekday     <ord> Monday, Monday, Monday, Monday, Monday, Monday, Monday, Mo…\n```\n:::\n:::\n\n\n## 3.7 Wrangling attributes\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\n\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nThe code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source,target,Weekday) %>%\n  summarise(Weight=n()) %>%\n  filter(source!=target) %>%\n  filter(Weight>1) %>%\n  ungroup()\n```\n:::\n\n\n## 3.8 Reviewing the revised edges file\n\nTable below shows the data structure of the reformatted *GAStech_edges_aggregated* data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,456\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7,…\n$ Weekday <ord> Monday, Tuesday, Wednesday, Friday, Monday, Tuesday, Wednesday…\n$ Weight  <int> 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4, 3, 5, 8, 4,…\n```\n:::\n:::\n\n\n# 4. Creating network objects using tidygraph\n\nIn this section, **tidygraph** packageyou will be used to create a graph data model. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\nRefer to these two articles for more information:\\\n- [Introducing tidygraph](https://www.data-imaginist.com/posts/2017-07-07-introducing-tidygraph/)\\\n- [tidygraph 1.1 - A tidy hope](https://www.data-imaginist.com/posts/2018-02-12-tidygraph-1-1-a-tidy-hope/index.html)\n\n## 4.1 The tbl_graph object\n\nTwo functions of **tidygraph** package can be used to create network objects, they are:\n\n-   `tbl_graph()` creates a new **tbl_graph** network object from nodes and edges data.\n\n-   `as_tbl_graph()` converts an existed network data and objects to a **tbl_graph** network. Below are network data and objects supported by `as_tbl_graph()`\n\n    -   a node data.frame and an edge data.frame,\n\n    -   data.frame, list, matrix from base,\n\n    -   igraph from igraph, - network from network,\n\n    -   dendrogram and hclust from stats,\n\n    -   Node from data.tree,\n\n    -   phylo and evonet from ape, and\n\n    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n## 4.2 The dplyr verbs in tidygraph\n\n-   `activate()` verb from **tidygraph** serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to **tbl_graph** object are applied to the active tibble.\n\n-   `N()` function is used to gain access to the node data while manipulating the edge data. Similarly .`E()` will give you the edge data and .`G()` will give you the tbl_graph object itself.\n\n## 4.3 Using tbl_graph() to build tidygraph data model\n\nIn this section, `tbl_graph()` of **tidygraph** package will be used to build an tidygraph’s network graph data.frame.\n\nBefore typing the codes, it's recommended to review to reference guide of [tbl_graph()](https://tidygraph.data-imaginist.com/reference/tbl_graph.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph <- tbl_graph(nodes=GAStech_nodes,\n                           edges=GAStech_edges_aggregated,\n                           directed =TRUE)\n```\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `directed=TRUE`: directed graph where edges have directions.\n:::\n\n## 4.4 Reviewing the output tidygraph's graph object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 54 nodes and 1456 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   <dbl> <chr>               <chr>          <chr>                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,456 × 4\n   from    to Weekday   Weight\n  <int> <int> <ord>      <int>\n1     1     2 Monday         4\n2     1     2 Tuesday        3\n3     1     2 Wednesday      5\n# ℹ 1,453 more rows\n```\n:::\n:::\n\n\n## 4.5 Changing the active object\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the `activate()` function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest *weight* first, we could use `activate()` and then `arrange()`.\n\nThe notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\nFor example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 54 nodes and 1456 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,456 × 4 (active)\n    from    to Weekday   Weight\n   <int> <int> <ord>      <int>\n 1    40    41 Tuesday       23\n 2    40    43 Tuesday       19\n 3    41    43 Tuesday       15\n 4    41    40 Tuesday       14\n 5    42    41 Tuesday       13\n 6    42    40 Tuesday       12\n 7    42    43 Tuesday       11\n 8    43    42 Wednesday     11\n 9    36    32 Wednesday      9\n10    40    41 Monday         9\n# ℹ 1,446 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n```\n:::\n:::\n\n\nVisit the reference guide of [activate()](https://tidygraph.data-imaginist.com/reference/activate.html) to find out more about the function.\n\n# 5. Plotting Static Network Graphs with ggraph package\n\n## 5.1 Plotting a basic network graph\n\n## 5.2 Changing the default network graph theme\n\n## 5.3 Changing the coloring of the plot\n\n## 5.4 Working with ggraph's layouts\n\n## 5.5 Fruchterman and Reingold layout\n\n## 5.6 Modifying network nodes\n\n## 5.7 Modifying edges\n\n# 6. Creating facet graphs\n\n## 6.1 Working with facet_edges()\n\n## 6.2 A framed facet graph\n\n## 6.3 Working with facet_nodes()\n\n# 7. Network Metrics Analysis\n\n## 7.1 Computing centrality indices\n\n## 7.2 Visualizing network metrics\n\n## 7.3 Visualizing community\n\n# 8. Building Interactive Network Graph with visNetwork\n\n## 8.1 Data Preparation\n\n## 8.2 Plotting the first interactive network graph\n\n## 8.3 Working with layout\n\n## 8.4 Working with visual attributes - Nodes\n\n## 8.5 Working with visual attributes - Edges\n\n## 8.6 Interactivity\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `left_join()`: is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
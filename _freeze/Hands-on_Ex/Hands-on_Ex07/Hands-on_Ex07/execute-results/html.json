{
  "hash": "28969b304ab58d5cd2ad7bbc1021c0b2",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 7: Visualising and Analysing Geographic Data\"\nauthor: \"Wei Yanrui\"\ndate: \"February 28, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\neditor: visual\n---\n\n\n# 1. Roadmap for studying\n\n# 2. Visualzing: Choropleth Maps\n\n## 2.1 Overview\n\n**What is Choropleth Maps?**\n\n-   a type of map that uses colors to represent the magnitude of specific data values within certain areas, such as population density, income levels, or any other statistical data.\n\n**Why use Choropleth Maps?**\n\n-   Visual representation: shows the differences in data between geographical areas, allowing one to see at a glance where values are high or low.\n\n-   Easy to understand.\n\n-   Wide application: climate change, economic development, happy index, social issues, and other different fields.\n\n**How does it work?**\n\n-   Each area is filled with a color corresponding to its data value. Higher data values are usually represented by darker colors, while lower data values are represented by lighter colors.\n\n## 2.2 Getting Started\n\nIn this hands-on exercise, the key R package use is [tmap](https://cran.r-project.org/web/packages/tmap/) package in R. Beside tmap package, four other R packages will be used. They are:\n\n-   readr for importing delimited text file,\n-   tidyr for tidying data,\n-   dplyr for wrangling data and\n-   [sf](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.\n\nTo install and load these packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap)\n```\n:::\n\n\n## 2.3 Importing Data\n\n### 2.3.1 The Data\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://beta.data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/). Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\n### 2.3.2 Importing Geospatial Data into R\n\nThe code chunk below uses the *st_read()* function of `sf` package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n**Simple Feature Data Frame**\n\n-   a data structure used for storing and manipulating spatial data.\n\n-   a standard for describing the geometries of spatial data, such as points (locations), lines (paths), polygons (areas), etc.\n\n-   allows data scientists and geographic information specialists to process and analyze geospatial data in a consistent manner across various GIS software and programming environments.\n\n-   Beyond the regular data columns (such as numeric, character, and logical values), a simple feature data frame includes at least one special column (known as the geometry column) that stores the spatial geometry data for each observation which enables the simple feature data frame to directly visualize and analyze spatial data within R, without the dependency on external GIS software.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\yanrui-w\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `dsn`: the data source name or directory where the geospatial files are located.\n\n2.  `layer`: the specific layer within the shapefile\n\n3.  **shapefile**: a popular geospatial vector data format that typically comprises several different files, which together define the attributes and geometric information of a map.\\\n    3.1 **.shp**: the main file that contains the geospatial geometry data.\\\n    3.2 **.shx**: the index file, which allows GIS programs to quickly find the geometries of the data.\\\n    3.3 **.dbf**: the attribute file that contains attribute data associated with each shape, stored in the dBASE format.\\\n    3.4 **.prf**: the projection file, which describes the coordinate system and projection information used by the geospatial data.\n:::\n\nYou can examine the content of `mpsz` (first 10 records) by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n:::\n:::\n\n\n### 2.3.3 Importing Attribute Data into R\n\nNext, we will import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n\n### 2.3.4 Data Preparation\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n-   AGED: age group 65 and above,\n-   TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### 2.3.4.1 Data Wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package, and\n-   *mutate(), filter(), group_by()* and *select()* of **dplyr** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA,SZ,AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG,\n              values_from=POP) %>%\n  mutate(YOUNG=rowSums(.[3:6])\n         +rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE`=rowSums(.[7:11])\n         +rowSums(.[13:15])) %>%\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%\n  mutate(`DEPENDENCY`=(`YOUNG`+`AGED`)/`ECONOMY ACTIVE`) %>%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)\n```\n:::\n\n\n#### 2.3.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of *SUBZONE_N* and *PLN_AREA_N* are in uppercase. We need to convert the ones of *PA* and *SZ* to uppercase as well so that they can be matched with *SUBZONE_N* and *PLN_AREA_N*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA,SZ),\n            .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  why `mutate_at()`, not `mutate()`: `mutate_at()` provides a more convenient way to apply the same operation or conversion to multiple columns.\n\n2.  `.vars=vars()`: `.vars` indicates which columns to be selected (could be vector of column name, vector of column index). `vars()` is a select helper enables you to choose multiple columns.\n\n3.  `.funs=funs(toupper)`: `.funs` indicates what function to be used to selected columns. `funs(toupper)` is the function to capitalize all characters.\n\n4.  `filter(`ECONOMY ACTIVE`> 0)`: to remove the rows where `DEPENDENCY` is NaN.\n:::\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz,popdata2020,\n                          by=c(\"SUBZONE_N\"=\"SZ\"))\n```\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `left_join()`: is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n:::\n\nTo save the R object to directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020,\"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n## 2.4 Plotting Choropleth Maps with *tmap*\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n-   Plotting highly customisable thematic map by using tmap elements.\n\n### 2.4.1 Plotting a choropleth map quickly by using *qtm()*\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `tmap_mode()`: is used to set the mode of `tmap`.\\\n    1.1 \"plot\" mode: produce a static map.\\\n    1.2 \"view\" mode: produce an interactive map.\n:::\n\n### 2.4.2 Plotting a choropleth map by using *tmap's elements*\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap’s drawing elements** should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type=\"8star\", size = 2)+\n  tm_scale_bar()+\n  tm_grid(alpha = 0.2)+\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\",\"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `tm_shape()`: indicates the foundation layer of the map which is the *mpsz_pop2020* dataset.\n\n2.  `tm_fill()`: one filling layer based on *DEPENDENCY* attribute.\\\n    2.1 `style=\"quantile\"`: indicates the rule of change on color. In this case, the color assignment is based on the quantiles of values of *DEPENDENCY*.\\\n    2.2 `palette=\"Blues\"`: select a set of blue colors to represent values of *DEPENDENCY*.\\\n    2.3 `title=\"...\"`: set the title for legend.\\\n\n3.  `tm_layout()`: design the overall layout and format of map.\\\n    3.1 `frame=TRUE`: adds frame line to the map.\\\n\n4.  `tm_borders`: border line layer to visually seperate each subzone.\\\n    4.1 `col=`: border color.\\\n    4.2 `lwd=`: border line width, default is 1.\\\n    4.3 `lty=`: border line type, default is \"solid\".\\\n    4.4 `alpha=`: border line transparency.\\\n\n5.  `tm_compass()`: compass layer to recognize directions.\n\n6.  `tm_scale_bar()`: measuring scale layer.\n\n7.  `tm_grid()`: add grid lines to the map.\n\n8.  `tm_credits()`: add copyright info and data source.\n:::\n\n### 2.4.3 Data classification methods of tmap\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. (different ways to group numerical data into categories or classes.)\n\n**tmap** provides a total ten data classification methods, namely: *fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher*, and *jenks*.\n\n-  **fixed**: Class boundaries are based on specific values you choose.\n\n-  **sd**: Classes are created based on the standard deviation from the mean of the data. This method is useful for data that is normally distributed. If most of your data points are close to the average, they fall into one class, and points far from the average fall into other classes.\n\n-  **equal**: This method divides the range of your data into equal-sized intervals.\n\n-  **pretty (default)**: This method tries to create classes that are easy to understand and are \"pretty\" or neatly aligned to round numbers. It’s like the equal method but adjusts the class limits to more round numbers.\n\n-  **Quantile**: Each class contains an equal number of data points. If you have 100 data points and you want 5 classes, each class will have 20 data points, regardless of the numerical range they cover.\n\n-  **KMeans**: It tries to group data points into clusters based on their value so that the points in each cluster are as similar as possible.\n\n-  **HClust(Hierarchical Clustering)**: Data is classified based on hierarchical clustering, which creates a tree of clusters. You can then decide where to cut the tree to form classes. It groups data points that are closely related into the same class.\n\n-  **BClust(Birch Clustering)**: Similar to HClust, but specifically uses the Birch clustering algorithm. This method is efficient for large datasets and tries to build a tree structure where the final clusters can be refined to form classes.\n\n-  **Fisher**: this method is often used to reduce the variance within classes and maximize the variance between classes. It's particularly good for data with natural breaks or clusters.\n\n-  **Jenks**: it's focused on finding natural groupings in your data. The Jenks optimization method minimizes variance within classes and maximizes it between classes, ideally highlighting natural groupings or patterns in the data.\n\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n#### 2.4.3.1 Plotting choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style=\"jenks\")+\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, *equal* data classification method is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style = \"equal\")+\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.3.2 Plotting choropleth map with custome break\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0,0.60,0.70,0.80,0.90,1.00))+\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  When you use the *breaks* parameter, you have already explicitly specified how to group the data, so there's no need for the *style* parameter to automatically determine these groups. The *breaks* parameter allows you to precisely control the range of each category, which is very useful when you already know how to group based on specific characteristics or values of the data.\n\n2.  The selected values of *DEPENDENCY* is from 0 to 1. Since the max value is 19, this value will not be displayed in the map, but it doesn't mean any area will not be displayed because one area consists of many values.\n:::\n\n### 2.4.4 Colour Scheme\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### 2.4.4.1 Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=6,\n          style = \"quantile\",\n          palette = \"Blues\")+\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotice that the choropleth map is shaded in green.\n\nTo **reverse** the colour shading, add a “-” prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNotice that the colour scheme has been reversed.\n\n### 2.4.5 Map Layouts\n\n#### 2.4.5.1 Map Legend\n\nIn tmap, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1)+\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE)+\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `legend.hist=TRUE`: This enables a histogram in the legend, showing the distribution of the data values across the categories defined by the Jenks classification. The histogram provides a visual representation of how many data points fall into each category.\n\n\n2.  `legend.hist.z=0.1`: This parameter adjusts the z-scale of the histogram in the legend, essentially controlling the height of the bars in the histogram relative to the size of the legend. A value of 0.1 reduces the height, making the histogram bars smaller.\n\n3   `legend.is.portrait=TRUE`: This setting controls the orientation of the legend. Setting it to **TRUE** makes the legend vertical (portrait mode). If it were **FALSE**, the legend would be horizontal (landscape mode).\n\n4.  `legend.height`,`legend.width`: `legend.height` sets the height of the legend relative to the height of the entire map, and `legend.width` sets the width relative to the width of the map. Both are expressed as fractions of the total height and width, so values of 0.45 and 0.35 mean the legend's height is 45% of the map's height, and its width is 35% of the map's width, respectively. (the size of the legend)\n\n5.  `legend.outside=FALSE`: This determines whether the legend should be placed outside the map area. Setting it to **FALSE** keeps the legend inside the main map area. If it were **TRUE**, the legend would be placed outside the map, which could be useful if the map area is crowded or if you want a clearer separation between the map and its legend.\n\n6.  `legend.position=c(\"right\",\"bottom\")`: This sets the position of the legend on the map. (the position of the legend)\n:::\n\n#### 2.4.5.2 Map style\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.\n\nThe code chunk below shows the *classic* style is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\")+\n  tm_borders(alpha = 0.5)+\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.5.3 Cartographic furniture\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\n\nIn the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\")+\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\", size=2)+\n  tm_scale_bar(width=0.15)+\n  tm_grid(lwd=0.1,alpha=0.2)+\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorith (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\",\"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Code Notes\n\n1.  `tm_credits()`: add a text label on the map, which is often used for attribution, to provide credits for the data source, or to include any other necessary textual information directly on the map visualization. This feature is particularly important for acknowledging sources or providing additional context to the map's viewers.\n:::\n\nTo reset the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n### 2.4.6 Drawing Small Multiple Choropleth Maps\n\n\n\n\n\n### 2.4.7 Plotting a choropleth map\n\n## 2.5\n\n## 2.6\n\n# 3. Visualzing: Geospatial Point Data\n\n# 4. Analyzing: Analytical Mapping\n",
    "supporting": [
      "Hands-on_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}